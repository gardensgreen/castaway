[{"/home/danieltillero/sailbnb/react_app/src/index.js":"1","/home/danieltillero/sailbnb/react_app/src/App.js":"2","/home/danieltillero/sailbnb/react_app/src/services/auth.js":"3","/home/danieltillero/sailbnb/react_app/src/components/auth/ProtectedRoute.js":"4","/home/danieltillero/sailbnb/react_app/src/components/NavBar/NavBar.js":"5","/home/danieltillero/sailbnb/react_app/src/components/NavBar/SearchBar.js":"6","/home/danieltillero/sailbnb/react_app/src/components/NavBar/UserMenu.js":"7","/home/danieltillero/sailbnb/react_app/src/components/NavBar/Logo.js":"8","/home/danieltillero/sailbnb/react_app/src/components/LandingPage/Hero.js":"9","/home/danieltillero/sailbnb/react_app/src/components/LandingPage/LandingPage.js":"10","/home/danieltillero/sailbnb/react_app/src/components/auth/LoginModal.js":"11","/home/danieltillero/sailbnb/react_app/src/components/auth/AuthStyles.js":"12","/home/danieltillero/sailbnb/react_app/src/components/auth/SignupModal.js":"13","/home/danieltillero/sailbnb/react_app/src/components/LandingPage/Animation.js":"14","/home/danieltillero/sailbnb/react_app/src/components/Home/Home.js":"15","/home/danieltillero/sailbnb/react_app/src/components/Home/BoatCard.js":"16","/home/danieltillero/sailbnb/react_app/src/services/boats.js":"17","/home/danieltillero/sailbnb/react_app/src/components/Home/Map.js":"18","/home/danieltillero/sailbnb/react_app/src/components/Boat/Boat.js":"19","/home/danieltillero/sailbnb/react_app/src/components/Boat/BoatHeader.js":"20","/home/danieltillero/sailbnb/react_app/src/components/Boat/Carousel.js":"21"},{"size":219,"mtime":1609892316081,"results":"22","hashOfConfig":"23"},{"size":1803,"mtime":1610626841369,"results":"24","hashOfConfig":"23"},{"size":1106,"mtime":1610066216094,"results":"25","hashOfConfig":"23"},{"size":293,"mtime":1609940780694,"results":"26","hashOfConfig":"23"},{"size":1177,"mtime":1610191752074,"results":"27","hashOfConfig":"23"},{"size":3305,"mtime":1610623687869,"results":"28","hashOfConfig":"23"},{"size":6879,"mtime":1610218210572,"results":"29","hashOfConfig":"23"},{"size":5502,"mtime":1610191634064,"results":"30","hashOfConfig":"23"},{"size":4198,"mtime":1610219483312,"results":"31","hashOfConfig":"23"},{"size":1111,"mtime":1610194203454,"results":"32","hashOfConfig":"23"},{"size":10781,"mtime":1610143978254,"results":"33","hashOfConfig":"23"},{"size":1182,"mtime":1610194390914,"results":"34","hashOfConfig":"23"},{"size":8965,"mtime":1610144496664,"results":"35","hashOfConfig":"23"},{"size":387,"mtime":1610183509724,"results":"36","hashOfConfig":"23"},{"size":1040,"mtime":1610510640669,"results":"37","hashOfConfig":"23"},{"size":4472,"mtime":1610572715289,"results":"38","hashOfConfig":"23"},{"size":442,"mtime":1610629143469,"results":"39","hashOfConfig":"23"},{"size":1202,"mtime":1610516669579,"results":"40","hashOfConfig":"23"},{"size":661,"mtime":1610632432439,"results":"41","hashOfConfig":"23"},{"size":4200,"mtime":1610633053679,"results":"42","hashOfConfig":"23"},{"size":362,"mtime":1610632635899,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"vmayur",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/danieltillero/sailbnb/react_app/src/index.js",[],["94","95"],"/home/danieltillero/sailbnb/react_app/src/App.js",["96"],"/home/danieltillero/sailbnb/react_app/src/services/auth.js",[],"/home/danieltillero/sailbnb/react_app/src/components/auth/ProtectedRoute.js",[],"/home/danieltillero/sailbnb/react_app/src/components/NavBar/NavBar.js",["97"],"import React from \"react\";\nimport { NavLink as NL } from \"react-router-dom\";\n// import LogoutButton from \"../auth/LogoutButton\";\nimport styled from \"styled-components\";\nimport InvertColorsIcon from \"@material-ui/icons/InvertColors\";\nimport SearchBar from \"./SearchBar\";\nimport UserMenu from \"./UserMenu\";\nimport Logo from \"./Logo\";\n\nconst Nav = styled.nav`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 40px 40px;\n    margin-bottom: 20px;\n`;\n\nconst NavLink = styled(NL)`\n    text-decoration: none;\n    color: inherit;\n`;\n\nconst Div = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 100%;\n`;\n\nconst NavBar = ({ authenticated, setAuthenticated }) => {\n    return (\n        <Nav>\n            <Div>\n                <NavLink to=\"/\" exact={true} activeClassName=\"active\">\n                    <Logo></Logo>\n                </NavLink>\n                <SearchBar />\n                <UserMenu\n                    authenticated={authenticated}\n                    setAuthenticated={setAuthenticated}\n                />\n            </Div>\n        </Nav>\n    );\n};\n\nexport default NavBar;\n","/home/danieltillero/sailbnb/react_app/src/components/NavBar/SearchBar.js",["98"],"/home/danieltillero/sailbnb/react_app/src/components/NavBar/UserMenu.js",["99"],"import { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Fade from \"@material-ui/core/Fade\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport LoginModal from \"../auth/LoginModal\";\nimport SignupModal from \"../auth/SignupModal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { logout } from \"../../services/auth\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: 300,\n    },\n    label: {\n        textTransform: \"capitalize\",\n    },\n});\n\n// const UserMenuContainer = styled.div`\n//     display: flex;\n//     border: 2px solid transparent;\n//     border-radius: 10px;\n//     padding: 10px;\n//     align-items: center;\n//     background-color: #fff;\n//     cursor: pointer;\n//     width: 100px;\n//     justify-content: space-around;\n//     &:hover {\n//         box-shadow: 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n//             0px 1px 1px -2px rgba(0, 0, 0, 0.12),\n//             0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n//     }\n\n//     &:focus {\n//         box-shadow: 0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n//             0px 1px 1px -2px rgba(0, 0, 0, 0.12),\n//             0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n//     }\n// `;\n\n// const UserMenuPopUp = styled(Menu)`\n//     margin-top: 65px;\n//     padding: 10px;\n// `;\n\n// const UserMenuPopUpItem = styled(MenuItem)`\n//     margin-right: 300px;\n// `;\n\nconst UserMenuPopUp = styled(Menu)`\n    margin-top: 65px;\n    padding: 10px;\n`;\n\nconst UserMenuPopUpItem = styled(MenuItem)`\n    margin-right: 300px;\n`;\nconst UserMenuContainer = styled.div`\n    display: flex;\n`;\n\nconst NavLink = styled.span`\n    color #3f51b5;\n    font-size: 1.2rem;\n    font-weight: 400;\n    margin-right: 30px;\n    cursor: pointer;\n`;\n\nconst UserMenuContainerAuth = styled.div`\n    display: flex;\n    border: 2px solid transparent;\n    border-radius: 10px;\n    padding: 10px;\n    align-items: center;\n    background-color: #fff;\n    cursor: pointer;\n\n    box-shadow: 0px 0px 0px 3px rgba(63, 81, 181, 0.5);\n`;\n\nexport default function UserMenu({ authenticated, setAuthenticated }) {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [openLoginModal, setOpenLoginModal] = useState(false);\n    const [openSignupModal, setOpenSignupModal] = useState(false);\n    const open = Boolean(anchorEl);\n    const classes = useStyles();\n\n    const handleClick = (e) => {\n        setAnchorEl(e.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleCloseLoginModal = () => {\n        setOpenLoginModal(false);\n    };\n\n    const handleCloseSignupModal = () => {\n        setOpenSignupModal(false);\n    };\n\n    const onLogout = async (e) => {\n        await logout();\n        setAuthenticated(false);\n        setOpenLoginModal(false);\n        setOpenSignupModal(false);\n        setAnchorEl(null);\n    };\n\n    return (\n        <>\n            {!authenticated ? (\n                <UserMenuContainer>\n                    {\" \"}\n                    <NavLink onClick={(e) => setOpenLoginModal(true)}>\n                        Login\n                    </NavLink>\n                    <LoginModal\n                        setAuthenticated={setAuthenticated}\n                        openModal={openLoginModal}\n                        handleClose={handleCloseLoginModal}\n                    />\n                    <NavLink onClick={(e) => setOpenSignupModal(true)}>\n                        Signup\n                    </NavLink>\n                    <SignupModal\n                        setAuthenticated={setAuthenticated}\n                        openModal={openSignupModal}\n                        handleClose={handleCloseSignupModal}\n                    />{\" \"}\n                </UserMenuContainer>\n            ) : (\n                <UserMenuContainerAuth\n                    aria-controls=\"fade-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleClick}\n                >\n                    <MenuIcon\n                        color=\"primary\"\n                        style={{ marginRight: \"5px\" }}\n                    ></MenuIcon>\n                    <AccountCircleIcon\n                        fontSize=\"large\"\n                        color=\"primary\"\n                    ></AccountCircleIcon>{\" \"}\n                </UserMenuContainerAuth>\n            )}\n\n            {/* <UserMenuContainer\n                aria-controls=\"fade-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n            >\n                <MenuIcon\n                    color=\"primary\"\n                    style={{ marginRight: \"5px\" }}\n                ></MenuIcon>\n                <AccountCircleIcon\n                    fontSize=\"large\"\n                    color=\"primary\"\n                ></AccountCircleIcon>\n            </UserMenuContainer>\n            <UserMenuPopUp\n                classes={{ root: classes.root }}\n                id=\"fade-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={handleClose}\n                TransitionComponent={Fade}\n            >\n                {!authenticated ? (\n                    <>\n                        <UserMenuPopUpItem\n                            onClick={(e) => setOpenLoginModal(true)}\n                        >\n                            Login\n                        </UserMenuPopUpItem>\n                        <LoginModal\n                            setAuthenticated={setAuthenticated}\n                            openModal={openLoginModal}\n                            handleClose={handleCloseLoginModal}\n                        />\n                        <UserMenuPopUpItem\n                            onClick={(e) => setOpenSignupModal(true)}\n                        >\n                            Sign Up\n                        </UserMenuPopUpItem>\n                        <SignupModal\n                            setAuthenticated={setAuthenticated}\n                            openModal={openSignupModal}\n                            handleClose={handleCloseSignupModal}\n                        />\n                    </>\n                ) : (\n                    <UserMenuPopUpItem onClick={onLogout}>\n                        Logout\n                    </UserMenuPopUpItem>\n                )}\n            </UserMenuPopUp> */}\n\n            <UserMenuPopUp\n                classes={{ root: classes.root }}\n                id=\"fade-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={open}\n                onClose={handleClose}\n                TransitionComponent={Fade}\n            >\n                <UserMenuPopUpItem onClick={onLogout}>Logout</UserMenuPopUpItem>\n            </UserMenuPopUp>\n        </>\n    );\n}\n","/home/danieltillero/sailbnb/react_app/src/components/NavBar/Logo.js",[],"/home/danieltillero/sailbnb/react_app/src/components/LandingPage/Hero.js",[],"/home/danieltillero/sailbnb/react_app/src/components/LandingPage/LandingPage.js",["100","101"],"import React from \"react\";\nimport Hero from \"./Hero\";\n\nexport default function LandingPage() {\n    return (\n        <div style={{ overflowY: \"hidden\", overflowX: \"hidden\" }}>\n            <Hero />\n            <div className=\"footer__container\">\n                <a\n                    href=\"https://github.com/gardensgreen/\"\n                    className=\"footer-link\"\n                >\n                    Github\n                </a>\n                <a\n                    href=\"https://www.linkedin.com/in/danieltillero/\"\n                    className=\"footer-link\"\n                >\n                    LinkedIn\n                </a>\n                <a\n                    href=\"https://github.com/gardensgreen/sailbnb/\"\n                    className=\"footer-link\"\n                >\n                    <i className=\"fab fa-github fa-2x\"></i>\n                </a>\n                <a href=\"#\" className=\"footer-link\">\n                    Contact\n                </a>\n\n                <a href=\"#\" className=\"footer-link\">\n                    Resume\n                </a>\n            </div>\n        </div>\n    );\n}\n","/home/danieltillero/sailbnb/react_app/src/components/auth/LoginModal.js",["102","103"],"import { useState, useEffect } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport {\n    ModalBody,\n    useStyles,\n    ModalContainer,\n    ModalForm,\n    ModalHeader,\n    ErrorContainer,\n    Error,\n    ErrorMessage,\n} from \"./AuthStyles\";\nimport { login } from \"../../services/auth\";\nimport { FormControl, InputLabel, OutlinedInput } from \"@material-ui/core\";\n\nexport default function LoginModal({\n    setAuthenticated,\n    openModal,\n    handleClose,\n}) {\n    const [errors, setErrors] = useState({});\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [showPassword, setShowPassword] = useState(false);\n    const [emailValidationError, setEmailValidationError] = useState(false);\n    const [passwordValidationError, setPasswordValidationError] = useState(\n        false\n    );\n\n    useEffect(() => {\n        setEmail(\"\");\n        setPassword(\"\");\n        setShowPassword(false);\n        setEmailValidationError(false);\n        setPasswordValidationError(false);\n        setErrors({});\n    }, [openModal]);\n\n    const onLogin = async (e) => {\n        e.preventDefault();\n        const user = await login(email, password);\n        if (!user.errors) {\n            setAuthenticated(true);\n        } else {\n            setErrors(user.errors);\n            if (user.errors.fields && user.errors.fields.includes(\"email\")) {\n                setEmailValidationError(true);\n            } else {\n                setEmailValidationError(false);\n            }\n            if (user.errors.fields && user.errors.fields.includes(\"password\")) {\n                setPasswordValidationError(true);\n            } else {\n                setPasswordValidationError(false);\n            }\n        }\n    };\n\n    const updateEmail = (e) => {\n        setEmail(e.target.value);\n    };\n\n    const updatePassword = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const handleClickShowPassword = () => {\n        setShowPassword(!showPassword);\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const classes = useStyles();\n\n    const body = (\n        <ModalBody>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <ModalContainer>\n                    <ModalHeader>Sign in</ModalHeader>\n                    <ModalForm onSubmit={onLogin}>\n                        {!emailValidationError ? (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                color=\"primary\"\n                                autoFocus\n                                value={email}\n                                onChange={updateEmail}\n                            />\n                        ) : (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                color=\"primary\"\n                                autoFocus\n                                value={email}\n                                onChange={updateEmail}\n                                error\n                            />\n                        )}\n                        {!passwordValidationError ? (\n                            <FormControl\n                                fullWidth\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            >\n                                <InputLabel htmlFor=\"outlined-adornment-password\">\n                                    Password\n                                </InputLabel>\n                                <OutlinedInput\n                                    id=\"outlined-adornment-password\"\n                                    required\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type={showPassword ? \"text\" : \"password\"}\n                                    color=\"primary\"\n                                    autoComplete=\"current-password\"\n                                    value={password}\n                                    onChange={updatePassword}\n                                    endAdornment={\n                                        <InputAdornment position=\"end\">\n                                            <IconButton\n                                                aria-label=\"toggle password visibility\"\n                                                onClick={\n                                                    handleClickShowPassword\n                                                }\n                                                onMouseDown={\n                                                    handleMouseDownPassword\n                                                }\n                                                edge=\"end\"\n                                            >\n                                                {showPassword ? (\n                                                    <Visibility />\n                                                ) : (\n                                                    <VisibilityOff />\n                                                )}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }\n                                />\n                            </FormControl>\n                        ) : (\n                            <FormControl\n                                fullWidth\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                error\n                            >\n                                <InputLabel htmlFor=\"outlined-adornment-password\">\n                                    Password\n                                </InputLabel>\n                                <OutlinedInput\n                                    id=\"outlined-adornment-password\"\n                                    required\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type={showPassword ? \"text\" : \"password\"}\n                                    color=\"primary\"\n                                    autoComplete=\"current-password\"\n                                    value={password}\n                                    onChange={updatePassword}\n                                    endAdornment={\n                                        <InputAdornment position=\"end\">\n                                            <IconButton\n                                                aria-label=\"toggle password visibility\"\n                                                onClick={\n                                                    handleClickShowPassword\n                                                }\n                                                onMouseDown={\n                                                    handleMouseDownPassword\n                                                }\n                                                edge=\"end\"\n                                            >\n                                                {showPassword ? (\n                                                    <Visibility />\n                                                ) : (\n                                                    <VisibilityOff />\n                                                )}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }\n                                />\n                            </FormControl>\n                        )}\n\n                        {errors.messages && errors.messages.length !== 0 ? (\n                            <ErrorContainer>\n                                {errors.messages.map((err, idx) => (\n                                    <Error key={idx}>\n                                        <InfoIcon\n                                            fontSize=\"small\"\n                                            color=\"secondary\"\n                                        />\n                                        <ErrorMessage>{err}</ErrorMessage>\n                                    </Error>\n                                ))}\n                            </ErrorContainer>\n                        ) : null}\n                        <FormControlLabel\n                            control={\n                                <Checkbox value=\"remember\" color=\"primary\" />\n                            }\n                            label=\"Remember me\"\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Sign In\n                        </Button>\n                    </ModalForm>\n                </ModalContainer>\n            </Container>\n            <LoginModal />\n        </ModalBody>\n    );\n\n    return (\n        <Modal\n            open={openModal}\n            onClose={handleClose}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n        >\n            {body}\n        </Modal>\n    );\n}\n","/home/danieltillero/sailbnb/react_app/src/components/auth/AuthStyles.js",[],"/home/danieltillero/sailbnb/react_app/src/components/auth/SignupModal.js",["104","105","106","107"],"import { useState, useEffect } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport {\n    ModalBody,\n    useStyles,\n    ModalContainer,\n    ModalForm,\n    ModalHeader,\n    ErrorContainer,\n    Error,\n    ErrorMessage,\n} from \"./AuthStyles\";\nimport { signup } from \"../../services/auth\";\n\nexport default function SignupModal({\n    setAuthenticated,\n    openModal,\n    handleClose,\n}) {\n    const [errors, setErrors] = useState({});\n    const [email, setEmail] = useState(\"\");\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [emailValidationError, setEmailValidationError] = useState(false);\n    const [passwordValidationError, setPasswordValidationError] = useState(\n        false\n    );\n    const [\n        repeatPasswordValidationError,\n        setRepeatPasswordValidationError,\n    ] = useState(false);\n\n    useEffect(() => {\n        setEmail(\"\");\n        setPassword(\"\");\n        setRepeatPassword(\"\");\n        setEmailValidationError(false);\n        setPasswordValidationError(false);\n        setErrors({});\n    }, [openModal]);\n\n    const onSignUp = async (e) => {\n        e.preventDefault();\n        if (password === repeatPassword) {\n            const user = await signup(email, password);\n            if (!user.errors) {\n                setAuthenticated(true);\n            } else {\n                setErrors(user.errors);\n                if (\n                    user.errors.fields &&\n                    user.errors.fields.includes(\"email\")\n                ) {\n                    setEmailValidationError(true);\n                } else {\n                    setEmailValidationError(false);\n                }\n                if (\n                    user.errors.fields &&\n                    user.errors.fields.includes(\"password\")\n                ) {\n                    setPasswordValidationError(true);\n                } else {\n                    setPasswordValidationError(false);\n                }\n            }\n        } else {\n            setRepeatPasswordValidationError(true);\n            setErrors({ messages: [\"Passwords must match\"] });\n        }\n    };\n\n    const updateEmail = (e) => {\n        setEmail(e.target.value);\n    };\n\n    const updatePassword = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const updateRepeatPassword = (e) => {\n        setRepeatPassword(e.target.value);\n    };\n\n    const classes = useStyles();\n\n    const body = (\n        <ModalBody>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <ModalContainer>\n                    <ModalHeader>Sign up</ModalHeader>\n                    <ModalForm onSubmit={onSignUp}>\n                        {!emailValidationError ? (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                color=\"primary\"\n                                autoFocus\n                                value={email}\n                                onChange={updateEmail}\n                            />\n                        ) : (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                                color=\"primary\"\n                                autoFocus\n                                value={email}\n                                onChange={updateEmail}\n                                error\n                            />\n                        )}\n                        {!passwordValidationError ? (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                color=\"primary\"\n                                autoComplete=\"current-password\"\n                                value={password}\n                                onChange={updatePassword}\n                            />\n                        ) : (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                color=\"primary\"\n                                autoComplete=\"current-password\"\n                                value={password}\n                                onChange={updatePassword}\n                                error\n                            />\n                        )}\n                        {!repeatPasswordValidationError ? (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"repeat_password\"\n                                label=\"Confirm Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                color=\"primary\"\n                                autoComplete=\"current-password\"\n                                onChange={updateRepeatPassword}\n                                value={repeatPassword}\n                            />\n                        ) : (\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"repeat_password\"\n                                label=\"Confirm Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                color=\"primary\"\n                                autoComplete=\"current-password\"\n                                onChange={updateRepeatPassword}\n                                value={repeatPassword}\n                                error\n                            />\n                        )}\n\n                        {errors.messages && errors.messages.length !== 0 ? (\n                            <ErrorContainer>\n                                {errors.messages.map((err, idx) => (\n                                    <Error key={idx}>\n                                        <InfoIcon\n                                            fontSize=\"small\"\n                                            color=\"secondary\"\n                                        />\n                                        <ErrorMessage>{err}</ErrorMessage>\n                                    </Error>\n                                ))}\n                            </ErrorContainer>\n                        ) : null}\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Sign Up\n                        </Button>\n                    </ModalForm>\n                </ModalContainer>\n            </Container>\n            <SignupModal />\n        </ModalBody>\n    );\n\n    return (\n        <Modal\n            open={openModal}\n            onClose={handleClose}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n        >\n            {body}\n        </Modal>\n    );\n}\n","/home/danieltillero/sailbnb/react_app/src/components/LandingPage/Animation.js",[],["108","109"],"/home/danieltillero/sailbnb/react_app/src/components/Home/Home.js",[],"/home/danieltillero/sailbnb/react_app/src/components/Home/BoatCard.js",["110"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst CardContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 45%;\n    margin-right: 30px;\n    margin-bottom: 30px;\n    border-radius: 4px;\n    box-shadow: rgba(18, 18, 20, 0.1) 0px 0px 1px,\n        rgba(18, 18, 20, 0.2) 0px 2px 4px;\n    text-decoration: none;\n`;\n\nconst CardImage = styled.div`\n    border-radius: 3px;\n    height: 200px;\n    width: 100%;\n\n    background-size: cover;\n    background-position: center;\n`;\n\nconst FeaturesBar = styled.div`\n    display: flex;\n    margin: 10px 10px;\n`;\n\nconst CardHeader = styled.span`\n    font-size: 1.2em;\n    font-weight: 700;\n    margin: 0px 20px;\n    margin-top: 10px;\n`;\n\nconst AmenityIcon = styled.i`\n    color: #666;\n    margin-right: 6px;\n`;\n\nconst InfoHolder = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 10px 10px;\n    border-top: 1px solid #c4c4c4;\n`;\nconst PeopleSpan = styled.span`\n    font-size: 1rem;\n    font-weight: 700;\n    margin: 10px 10px;\n`;\nconst PriceSpan = styled.span`\n    font-size: 1rem;\n    font-weight: 700;\n    margin: 10px 10px;\n`;\n\nconst getAmenitiesList = (boat) => {\n    let al = [];\n    for (let a in boat.amenities) {\n        if (boat.amenities[a] === true) al.push(a);\n    }\n    return al;\n};\n\nexport default function BoatCard({ boat }) {\n    const [amenities, setAmenities] = useState([]);\n\n    useEffect(() => {\n        const amenitiesList = getAmenitiesList(boat);\n        setAmenities(amenitiesList);\n        console.log(amenities);\n    }, []);\n\n    return (\n        <CardContainer>\n            <CardImage\n                style={{ backgroundImage: `url(${boat.photos[0].mediaUrl})` }}\n            />\n            <CardHeader>\n                {boat.name.length <= 20\n                    ? boat.name\n                    : boat.name.slice(0, 20) + \"..\"}\n            </CardHeader>\n\n            <InfoHolder>\n                <PeopleSpan>\n                    <AmenityIcon className=\"fas fa-users fa-1x\"></AmenityIcon>\n                    {boat.totalOccupancy}\n                </PeopleSpan>\n                <FeaturesBar>\n                    {amenities &&\n                        amenities.map((a, idx) => {\n                            switch (a) {\n                                case \"hasTv\":\n                                    return (\n                                        <AmenityIcon\n                                            key={idx}\n                                            className=\"fas fa-tv fa-1x\"\n                                        ></AmenityIcon>\n                                    );\n\n                                case \"hasKitchen\":\n                                    return (\n                                        <AmenityIcon\n                                            key={idx}\n                                            className=\"fas fa-sink fa-1x\"\n                                        ></AmenityIcon>\n                                    );\n\n                                case \"hasAirConditioning\":\n                                    return (\n                                        <AmenityIcon\n                                            key={idx}\n                                            className=\"fas fa-fan fa-1x\"\n                                        ></AmenityIcon>\n                                    );\n\n                                case \"hasInternet\":\n                                    return (\n                                        <AmenityIcon\n                                            key={idx}\n                                            className=\"fas fa-wifi fa-1x\"\n                                        ></AmenityIcon>\n                                    );\n\n                                case \"hasHeating\":\n                                    return (\n                                        <AmenityIcon\n                                            key={idx}\n                                            className=\"fas fa-fire fa-1x\"\n                                        ></AmenityIcon>\n                                    );\n\n                                default:\n                                    return null;\n                            }\n                        })}\n                </FeaturesBar>\n                <PriceSpan>${boat.price}/day</PriceSpan>\n            </InfoHolder>\n        </CardContainer>\n    );\n}\n","/home/danieltillero/sailbnb/react_app/src/services/boats.js",[],"/home/danieltillero/sailbnb/react_app/src/components/Home/Map.js",[],"/home/danieltillero/sailbnb/react_app/src/components/Boat/Boat.js",[],"/home/danieltillero/sailbnb/react_app/src/components/Boat/BoatHeader.js",[],"/home/danieltillero/sailbnb/react_app/src/components/Boat/Carousel.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":6,"column":8,"nodeType":"117","messageId":"118","endLine":6,"endColumn":22},{"ruleId":"115","severity":1,"message":"119","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":24},{"ruleId":"115","severity":1,"message":"120","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"121","line":1,"column":20,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"122","severity":1,"message":"123","line":27,"column":17,"nodeType":"124","endLine":27,"endColumn":53},{"ruleId":"122","severity":1,"message":"123","line":31,"column":17,"nodeType":"124","endLine":31,"endColumn":53},{"ruleId":"115","severity":1,"message":"125","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":12},{"ruleId":"115","severity":1,"message":"126","line":8,"column":8,"nodeType":"117","messageId":"118","endLine":8,"endColumn":12},{"ruleId":"115","severity":1,"message":"127","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":24},{"ruleId":"115","severity":1,"message":"128","line":6,"column":8,"nodeType":"117","messageId":"118","endLine":6,"endColumn":16},{"ruleId":"115","severity":1,"message":"125","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":12},{"ruleId":"115","severity":1,"message":"126","line":8,"column":8,"nodeType":"117","messageId":"118","endLine":8,"endColumn":12},{"ruleId":"111","replacedBy":"129"},{"ruleId":"113","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":75,"column":8,"nodeType":"133","endLine":75,"endColumn":10,"suggestions":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'ProtectedRoute' is defined but never used.","Identifier","unusedVar","'InvertColorsIcon' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Link' is defined but never used.","'Grid' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.",["135"],["136"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'amenities' and 'boat'. Either include them or remove the dependency array.","ArrayExpression",["137"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},"Update the dependencies array to be: [amenities, boat]",{"range":"140","text":"141"},[1611,1613],"[amenities, boat]"]